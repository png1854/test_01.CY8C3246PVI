C51 COMPILER V9.51   CYFITTER_CFG                                                          09/19/2018 02:40:04 PAGE 1   


C51 COMPILER V9.51, COMPILATION OF MODULE CYFITTER_CFG
OBJECT MODULE PLACED IN .\DP8051\DP8051_Keil_951\Debug\cyfitter_cfg.obj
COMPILER INVOKED BY: C:\Program Files (x86)\Cypress\PSoC Creator\4.2\PSoC Creator\import\keil\pk51\9.51\C51\BIN\c51.exe 
                    -Generated_Source\PSoC3\cyfitter_cfg.c NOIV LARGE MODDP2 OMF2 VB(1) NOIP INCDIR(.,Generated_Source\PSoC3) FF(3) DB DF(DEB
                    -UG) WL(2) PR(.\DP8051\DP8051_Keil_951\Debug/cyfitter_cfg.lst) CD OT(2,SIZE) OJ(.\DP8051\DP8051_Keil_951\Debug\cyfitter_c
                    -fg.obj)

line level    source

   1          
   2          /*******************************************************************************
   3          * File Name: cyfitter_cfg.c
   4          * 
   5          * PSoC Creator  4.2
   6          *
   7          * Description:
   8          * This file contains device initialization code.
   9          * Except for the user defined sections in CyClockStartupError(), this file should not be modified.
  10          * This file is automatically generated by PSoC Creator.
  11          *
  12          ********************************************************************************
  13          * Copyright (c) 2007-2018 Cypress Semiconductor.  All rights reserved.
  14          * You may use this file only in accordance with the license, terms, conditions, 
  15          * disclaimers, and limitations in the end user license agreement accompanying 
  16          * the software package with which this file was provided.
  17          ********************************************************************************/
  18          
  19          #include <string.h>
  20          #include "cytypes.h"
  21          #include "cydevice_trm.h"
  22          #include "cyfitter.h"
  23          #include "CyLib.h"
  24          #include "cyfitter_cfg.h"
  25          
  26          #define CY_NEED_CYCLOCKSTARTUPERROR 1
  27          
  28          
  29          #if defined(__C51__) || defined(__CX51__)
  30                  #define CYPACKED
  31                  #define CYPACKED_ATTR
  32                  #define CYALIGNED
  33                  
  34              #define CY_CFG_UNUSED
  35                  #define CY_CFG_MEMORY_BARRIER() do { } while (0)
  36          
  37          
  38          
  39                  #define CYMEMZERO(a,c) cymemzero((a),(c))
  40                  #define CYCONFIGCPY(d,s,c) cyconfigcpy((c),(s),(d))
  41                  #define CYCONFIGCPYCODE(d,s,c) cyconfigcpycode((c),(s),(d))
  42          #else
                      #error Unsupported toolchain
              #endif
  45          
  46          
  47          
  48          
  49          /* Clock startup error codes                                                   */
  50          #define CYCLOCKSTART_NO_ERROR    0u
  51          #define CYCLOCKSTART_XTAL_ERROR  1u
  52          #define CYCLOCKSTART_32KHZ_ERROR 2u
C51 COMPILER V9.51   CYFITTER_CFG                                                          09/19/2018 02:40:04 PAGE 2   

  53          #define CYCLOCKSTART_PLL_ERROR   3u
  54          #define CYCLOCKSTART_FLL_ERROR   4u
  55          #define CYCLOCKSTART_WCO_ERROR   5u
  56          
  57          
  58          #ifdef CY_NEED_CYCLOCKSTARTUPERROR
  59          /*******************************************************************************
  60          * Function Name: CyClockStartupError
  61          ********************************************************************************
  62          * Summary:
  63          *  If an error is encountered during clock configuration (crystal startup error,
  64          *  PLL lock error, etc.), the system will end up here.  Unless reimplemented by
  65          *  the customer, this function will stop in an infinite loop.
  66          *
  67          * Parameters:
  68          *   void
  69          *
  70          * Return:
  71          *   void
  72          *
  73          *******************************************************************************/
  74          CY_CFG_UNUSED
  75          static void CyClockStartupError(uint8 errorCode);
  76          CY_CFG_UNUSED
  77          static void CyClockStartupError(uint8 errorCode)
  78          {
  79   1          /* To remove the compiler warning if errorCode not used.                */
  80   1          errorCode = errorCode;
  81   1      
  82   1          /* If we have a clock startup error (bad MHz crystal, PLL lock, etc.),  */
  83   1          /* we will end up here to allow the customer to implement something to  */
  84   1          /* deal with the clock condition.                                       */
  85   1      
  86   1      #ifdef CY_CFG_CLOCK_STARTUP_ERROR_CALLBACK
                  CY_CFG_Clock_Startup_ErrorCallback();
              #else
  89   1          /*  If not using CY_CFG_CLOCK_STARTUP_ERROR_CALLBACK, place your clock startup code here. */
  90   1          /* `#START CyClockStartupError` */
  91   1      
  92   1          /* If we have a clock startup error (bad MHz crystal, PLL lock, etc.),  */
  93   1          /* we will end up here to allow the customer to implement something to  */
  94   1          /* deal with the clock condition.                                       */
  95   1      
  96   1          /* `#END` */
  97   1      
  98   1          while(1) {}
  99   1      #endif /* CY_CFG_CLOCK_STARTUP_ERROR_CALLBACK */
 100   1      }
 101          #endif
 102          
 103          /* IOPINS0_0 Address: CYREG_PRT0_DM0 Size (bytes): 8 */
 104          #define BS_IOPINS0_0_VAL ((const uint8 CYFAR *)0x00080000u)
 105          
 106          /* IOPINS0_1 Address: CYREG_PRT1_DM0 Size (bytes): 8 */
 107          #define BS_IOPINS0_1_VAL ((const uint8 CYFAR *)0x00080008u)
 108          
 109          
 110          /*******************************************************************************
 111          * Function Name: ClockSetup
 112          ********************************************************************************
 113          *
 114          * Summary:
C51 COMPILER V9.51   CYFITTER_CFG                                                          09/19/2018 02:40:04 PAGE 3   

 115          *  Performs the initialization of all of the clocks in the device based on the
 116          *  settings in the Clock tab of the DWR.  This includes enabling the requested
 117          *  clocks and setting the necessary dividers to produce the desired frequency. 
 118          *
 119          * Parameters:
 120          *  void
 121          *
 122          * Return:
 123          *  void
 124          *
 125          *******************************************************************************/
 126          static void ClockSetup(void);
 127          static void ClockSetup(void)
 128          {
 129   1              uint32 timeout;
 130   1              uint8 pllLock;
 131   1      
 132   1      
 133   1              /* Configure ILO based on settings from Clock DWR */
 134   1              CY_SET_REG8((void CYXDATA *)(CYREG_SLOWCLK_ILO_CR0), 0x06u);
 135   1      
 136   1              /* Configure XTAL based on settings from Clock DWR */
 137   1              CY_SET_XTND_REG16((void CYFAR *)(CYREG_FASTCLK_XMHZ_CFG0), 0x3313u);
 138   1              CY_SET_REG8((void CYXDATA *)(CYREG_FASTCLK_XMHZ_CSR), 0x05u);
 139   1              /* Wait up to 130000us for the XTAL to lock */
 140   1              CY_GET_REG8((void CYXDATA *)CYREG_FASTCLK_XMHZ_CSR);
 141   1              for (timeout = 130000u / 10u; (timeout > 0u) && ((CY_GET_REG8((void CYXDATA *)CYREG_FASTCLK_XMHZ_CSR) & 0
             -x80u) != 0u); timeout--)
 142   1              { 
 143   2                      
 144   2                      CyDelayCycles(10u * 48u); /* Delay 10us based on 48MHz clock */
 145   2              }
 146   1              if (timeout == 0u)
 147   1              {
 148   2                      CyClockStartupError(CYCLOCKSTART_XTAL_ERROR);
 149   2              }
 150   1      
 151   1              /* Configure PLL based on settings from Clock DWR */
 152   1              CY_SET_XTND_REG16((void CYFAR *)(CYREG_FASTCLK_PLL_P), 0x0714u);
 153   1              CY_SET_REG8((void CYXDATA *)(CYREG_CLKDIST_CR), 0x01u);
 154   1              CY_SET_XTND_REG16((void CYFAR *)(CYREG_FASTCLK_PLL_CFG0), 0x1251u);
 155   1              /* Wait up to 250us for the PLL to lock */
 156   1              pllLock = 0u;
 157   1              for (timeout = 250u / 10u; (timeout > 0u) && (pllLock != 0x03u); timeout--)
 158   1              { 
 159   2                      pllLock = 0x03u & ((uint8)((uint8)pllLock << 1) | ((CY_GET_REG8((void CYXDATA *)CYREG_FASTCLK_PLL_SR) & 
             -0x01u) >> 0));
 160   2                      CyDelayCycles(10u * 48u); /* Delay 10us based on 48MHz clock */
 161   2              }
 162   1              /* If we ran out of time the PLL didn't lock so go to the error function */
 163   1              if (timeout == 0u)
 164   1              {
 165   2                      CyClockStartupError(CYCLOCKSTART_PLL_ERROR);
 166   2              }
 167   1      
 168   1              /* Configure Bus/Master Clock based on settings from Clock DWR */
 169   1              CY_SET_XTND_REG16((void CYFAR *)(CYREG_CLKDIST_MSTR0), 0x0100u);
 170   1              CY_SET_REG8((void CYXDATA *)(CYREG_CLKDIST_CR), 0x41u);
 171   1      
 172   1              /* Configure IMO based on settings from Clock DWR */
 173   1              CY_SET_REG8((void CYXDATA *)(CYREG_FASTCLK_IMO_CR), 0x20u);
 174   1              CY_SET_REG8((void CYXDATA *)(CYREG_CLKDIST_MSTR0), 0x07u);
C51 COMPILER V9.51   CYFITTER_CFG                                                          09/19/2018 02:40:04 PAGE 4   

 175   1              CY_SET_REG8((void CYXDATA *)(CYREG_CLKDIST_BCFG0), 0x00u);
 176   1              CY_SET_REG8((void CYXDATA *)(CYREG_CLKDIST_BCFG2), 0x48u);
 177   1              CY_SET_REG8((void CYXDATA *)(CYREG_CLKDIST_MSTR0), 0x00u);
 178   1              CY_SET_REG8((void CYXDATA *)(CYREG_CLKDIST_LD), 0x02u);
 179   1      }
 180          
 181          
 182          /* Analog API Functions */
 183          
 184          
 185          /*******************************************************************************
 186          * Function Name: AnalogSetDefault
 187          ********************************************************************************
 188          *
 189          * Summary:
 190          *  Sets up the analog portions of the chip to default values based on chip
 191          *  configuration options from the project.
 192          *
 193          * Parameters:
 194          *  void
 195          *
 196          * Return:
 197          *  void
 198          *
 199          *******************************************************************************/
 200          static void AnalogSetDefault(void);
 201          static void AnalogSetDefault(void)
 202          {
 203   1              uint8 bg_xover_inl_trim = CY_GET_XTND_REG8((void CYFAR *)(CYREG_FLSHID_MFG_CFG_BG_XOVER_INL_TRIM + 1u));
 204   1              CY_SET_REG8((void CYXDATA *)(CYREG_BG_DFT0), (bg_xover_inl_trim & 0x07u));
 205   1              CY_SET_REG8((void CYXDATA *)(CYREG_BG_DFT1), ((bg_xover_inl_trim >> 4) & 0x0Fu));
 206   1              CY_SET_REG8((void CYXDATA *)CYREG_PUMP_CR0, 0x44u);
 207   1      }
 208          
 209          
 210          /*******************************************************************************
 211          * Function Name: SetAnalogRoutingPumps
 212          ********************************************************************************
 213          *
 214          * Summary:
 215          * Enables or disables the analog pumps feeding analog routing switches.
 216          * Intended to be called at startup, based on the Vdda system configuration;
 217          * may be called during operation when the user informs us that the Vdda voltage
 218          * crossed the pump threshold.
 219          *
 220          * Parameters:
 221          *  enabled - 1 to enable the pumps, 0 to disable the pumps
 222          *
 223          * Return:
 224          *  void
 225          *
 226          *******************************************************************************/
 227          void SetAnalogRoutingPumps(uint8 enabled)
 228          {
 229   1              uint8 regValue = CY_GET_REG8((void CYXDATA *)CYREG_PUMP_CR0);
 230   1              if (enabled != 0u)
 231   1              {
 232   2                      regValue |= 0x00u;
 233   2              }
 234   1              else
 235   1              {
 236   2                      regValue &= (uint8)~0x00u;
C51 COMPILER V9.51   CYFITTER_CFG                                                          09/19/2018 02:40:04 PAGE 5   

 237   2              }
 238   1              CY_SET_REG8((void CYXDATA *)CYREG_PUMP_CR0, regValue);
 239   1      }
 240          
 241          
 242          
 243          
 244          /*******************************************************************************
 245          * Function Name: cyfitter_cfg
 246          ********************************************************************************
 247          * Summary:
 248          *  This function is called by the start-up code for the selected device. It
 249          *  performs all of the necessary device configuration based on the design
 250          *  settings.  This includes settings from the Design Wide Resources (DWR) such
 251          *  as Clocks and Pins as well as any component configuration that is necessary.
 252          *
 253          * Parameters:
 254          *   void
 255          *
 256          * Return:
 257          *   void
 258          *
 259          *******************************************************************************/
 260          
 261          void cyfitter_cfg(void)
 262          {
 263   1              /* Enable/Disable Debug functionality based on settings from System DWR */
 264   1              CY_SET_XTND_REG8((void CYFAR *)CYREG_MLOGIC_DEBUG, (CY_GET_XTND_REG8((void CYFAR *)CYREG_MLOGIC_DEBUG) | 
             -0x05u));
 265   1      
 266   1              {
 267   2      
 268   2                      CYPACKED typedef struct {
 269   2                              void CYFAR *address;
 270   2                              uint16 size;
 271   2                      } CYPACKED_ATTR cfg_memset_t;
 272   2      
 273   2                      static const cfg_memset_t CYCODE cfg_memset_list[] = {
 274   2                              /* address, size */
 275   2                              {(void CYFAR *)(CYREG_PRT2_DR), 80u},
 276   2                              {(void CYFAR *)(CYREG_PRT12_DR), 16u},
 277   2                              {(void CYFAR *)(CYREG_PRT15_DR), 16u},
 278   2                              {(void CYFAR *)(CYDEV_UCFG_B0_P0_U0_BASE), 4096u},
 279   2                              {(void CYFAR *)(CYDEV_UCFG_B1_P2_U0_BASE), 2048u},
 280   2                              {(void CYFAR *)(CYDEV_UCFG_DSI0_BASE), 2560u},
 281   2                              {(void CYFAR *)(CYDEV_UCFG_DSI12_BASE), 512u},
 282   2                              {(void CYFAR *)(CYREG_BCTL0_MDCLK_EN), 32u},
 283   2                      };
 284   2      
 285   2                      uint8 CYDATA i;
 286   2      
 287   2                      /* Zero out critical memory blocks before beginning configuration */
 288   2                      for (i = 0u; i < (sizeof(cfg_memset_list)/sizeof(cfg_memset_list[0])); i++)
 289   2                      {
 290   3                              const cfg_memset_t CYCODE * CYDATA ms = &cfg_memset_list[i];
 291   3                              CYMEMZERO(ms->address, ms->size);
 292   3                      }
 293   2      
 294   2                      /* Enable digital routing */
 295   2                      CY_SET_XTND_REG8((void CYFAR *)CYREG_BCTL0_BANK_CTL, CY_GET_XTND_REG8((void CYFAR *)CYREG_BCTL0_BANK_CTL
             -) | 0x02u);
 296   2                      CY_SET_XTND_REG8((void CYFAR *)CYREG_BCTL1_BANK_CTL, CY_GET_XTND_REG8((void CYFAR *)CYREG_BCTL1_BANK_CTL
C51 COMPILER V9.51   CYFITTER_CFG                                                          09/19/2018 02:40:04 PAGE 6   

             -) | 0x02u);
 297   2              }
 298   1      
 299   1      
 300   1              /* Perform second pass device configuration. These items must be configured in specific order after the r
             -egular configuration is done. */
 301   1              CYCONFIGCPY((void CYFAR *)(CYREG_PRT0_DM0), (const void CYFAR *)(BS_IOPINS0_0_VAL), 8u);
 302   1              CYCONFIGCPY((void CYFAR *)(CYREG_PRT1_DM0), (const void CYFAR *)(BS_IOPINS0_1_VAL), 8u);
 303   1              /* Switch Boost to the precision bandgap reference from its internal reference */
 304   1              CY_SET_REG8((void CYXDATA *)CYREG_BOOST_CR2, (CY_GET_REG8((void CYXDATA *)CYREG_BOOST_CR2) | 0x08u));
 305   1              if (CYDEV_CHIP_REV_ACTUAL < 5u)
 306   1              {
 307   2                      CY_SET_REG8((void CYXDATA *)CYREG_PWRSYS_WAKE_TR2, 0x3Au);
 308   2              }
 309   1      
 310   1      
 311   1              /* Set Flash Cycles based on max possible frequency in case a glitch occurs during ClockSetup(). */
 312   1              CY_SET_REG8((void CYXDATA *)(CYREG_CACHE_CR), (((CYDEV_INSTRUCT_CACHE_ENABLED) != 0) ? 0xF1u : 0xC0u));
 313   1              /* Setup clocks based on selections from Clock DWR */
 314   1              ClockSetup();
 315   1              CY_SET_XTND_REG8((void CYFAR *)(CYREG_BCTL0_UDB_TEST_3), 0x40u);
 316   1              CY_SET_XTND_REG8((void CYFAR *)(CYREG_BCTL1_UDB_TEST_3), 0x40u);
 317   1      
 318   1              /* Perform basic analog initialization to defaults */
 319   1              AnalogSetDefault();
 320   1      
 321   1              /* Configure alternate active mode */
 322   1              CYCONFIGCPY((void CYFAR *)CYDEV_PM_STBY_BASE, (const void CYFAR *)CYDEV_PM_ACT_BASE, 14u);
 323   1              CY_SET_REG8((void CYXDATA *)CYREG_PM_STBY_CFG0, CY_GET_REG8((void CYXDATA *)CYREG_PM_STBY_CFG0) & (uint8)
             -~0x02u);        /* Disable CPU */
 324   1      }
C51 COMPILER V9.51   CYFITTER_CFG                                                          09/19/2018 02:40:04 PAGE 7   

ASSEMBLY LISTING OF GENERATED OBJECT CODE


             ; FUNCTION _CyClockStartupError (BEGIN)
                                           ; SOURCE LINE # 77
0000 900000      R     MOV     DPTR,#errorCode
0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 78
                                           ; SOURCE LINE # 80
0005 900000      R     MOV     DPTR,#errorCode
0008 E0                MOVX    A,@DPTR
0009 FF                MOV     R7,A
000A 900000      R     MOV     DPTR,#errorCode
000D EF                MOV     A,R7
000E F0                MOVX    @DPTR,A
000F         ?C0001:
                                           ; SOURCE LINE # 98
000F 80FE              SJMP    ?C0001
0011 22                RET     
             ; FUNCTION _CyClockStartupError (END)

             ; FUNCTION ClockSetup (BEGIN)
                                           ; SOURCE LINE # 127
                                           ; SOURCE LINE # 128
                                           ; SOURCE LINE # 134
0000 904300            MOV     DPTR,#04300H
0003 7406              MOV     A,#06H
0005 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 137
0006 7B00              MOV     R3,#00H
0008 7A42              MOV     R2,#042H
000A 7912              MOV     R1,#012H
000C 7D13              MOV     R5,#013H
000E 7C33              MOV     R4,#033H
0010 120000      E     LCALL   _cywrite16
                                           ; SOURCE LINE # 138
0013 904210            MOV     DPTR,#04210H
0016 7405              MOV     A,#05H
0018 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 140
0019 904210            MOV     DPTR,#04210H
001C E0                MOVX    A,@DPTR
001D FF                MOV     R7,A
                                           ; SOURCE LINE # 141
001E 7FC8              MOV     R7,#0C8H
0020 7E32              MOV     R6,#032H
0022 7D00              MOV     R5,#00H
0024 7C00              MOV     R4,#00H
0026 900000      R     MOV     DPTR,#timeout
0029 120000      E     LCALL   ?C?LSTXDATA
002C         ?C0004:
002C 900000      R     MOV     DPTR,#timeout
002F 120000      E     LCALL   ?C?LLDXDATA
0032 D3                SETB    C
0033 EF                MOV     A,R7
0034 9400              SUBB    A,#00H
0036 EE                MOV     A,R6
0037 9400              SUBB    A,#00H
0039 4033              JC      ?C0005
003B 904210            MOV     DPTR,#04210H
003E E0                MOVX    A,@DPTR
C51 COMPILER V9.51   CYFITTER_CFG                                                          09/19/2018 02:40:04 PAGE 8   

003F FF                MOV     R7,A
0040 EF                MOV     A,R7
0041 5480              ANL     A,#080H
0043 FF                MOV     R7,A
0044 7E00              MOV     R6,#00H
0046 EF                MOV     A,R7
0047 4E                ORL     A,R6
0048 6024              JZ      ?C0005
                                           ; SOURCE LINE # 142
                                           ; SOURCE LINE # 144
004A 7FE0              MOV     R7,#0E0H
004C 7E01              MOV     R6,#01H
004E 7D00              MOV     R5,#00H
0050 7C00              MOV     R4,#00H
0052 120000      E     LCALL   _CyDelayCycles
                                           ; SOURCE LINE # 145
0055 900000      R     MOV     DPTR,#timeout
0058 120000      E     LCALL   ?C?LLDXDATA
005B 7BFF              MOV     R3,#0FFH
005D 7AFF              MOV     R2,#0FFH
005F 79FF              MOV     R1,#0FFH
0061 78FF              MOV     R0,#0FFH
0063 120000      E     LCALL   ?C?LADD
0066 900000      R     MOV     DPTR,#timeout
0069 120000      E     LCALL   ?C?LSTXDATA
006C 80BE              SJMP    ?C0004
006E         ?C0005:
                                           ; SOURCE LINE # 146
006E 900000      R     MOV     DPTR,#timeout
0071 120000      E     LCALL   ?C?LLDXDATA
0074 EF                MOV     A,R7
0075 4E                ORL     A,R6
0076 7005              JNZ     ?C0007
                                           ; SOURCE LINE # 147
                                           ; SOURCE LINE # 148
0078 7F01              MOV     R7,#01H
007A 120000      R     LCALL   _CyClockStartupError
                                           ; SOURCE LINE # 149
007D         ?C0007:
                                           ; SOURCE LINE # 152
007D 7B00              MOV     R3,#00H
007F 7A42              MOV     R2,#042H
0081 7922              MOV     R1,#022H
0083 7D14              MOV     R5,#014H
0085 7C07              MOV     R4,#07H
0087 120000      E     LCALL   _cywrite16
                                           ; SOURCE LINE # 153
008A 904000            MOV     DPTR,#04000H
008D 7401              MOV     A,#01H
008F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 154
0090 7B00              MOV     R3,#00H
0092 7A42              MOV     R2,#042H
0094 7920              MOV     R1,#020H
0096 7D51              MOV     R5,#051H
0098 7C12              MOV     R4,#012H
009A 120000      E     LCALL   _cywrite16
                                           ; SOURCE LINE # 156
009D 900000      R     MOV     DPTR,#pllLock
00A0 E4                CLR     A
00A1 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 157
C51 COMPILER V9.51   CYFITTER_CFG                                                          09/19/2018 02:40:04 PAGE 9   

00A2 7F19              MOV     R7,#019H
00A4 7E00              MOV     R6,#00H
00A6 7D00              MOV     R5,#00H
00A8 7C00              MOV     R4,#00H
00AA 900000      R     MOV     DPTR,#timeout
00AD 120000      E     LCALL   ?C?LSTXDATA
00B0         ?C0008:
00B0 900000      R     MOV     DPTR,#timeout
00B3 120000      E     LCALL   ?C?LLDXDATA
00B6 D3                SETB    C
00B7 EF                MOV     A,R7
00B8 9400              SUBB    A,#00H
00BA EE                MOV     A,R6
00BB 9400              SUBB    A,#00H
00BD 404E              JC      ?C0009
00BF 900000      R     MOV     DPTR,#pllLock
00C2 E0                MOVX    A,@DPTR
00C3 FF                MOV     R7,A
00C4 EF                MOV     A,R7
00C5 6403              XRL     A,#03H
00C7 6044              JZ      ?C0009
                                           ; SOURCE LINE # 158
                                           ; SOURCE LINE # 159
00C9 904225            MOV     DPTR,#04225H
00CC E0                MOVX    A,@DPTR
00CD FF                MOV     R7,A
00CE EF                MOV     A,R7
00CF 5401              ANL     A,#01H
00D1 FF                MOV     R7,A
00D2 7E00              MOV     R6,#00H
00D4 900000      R     MOV     DPTR,#pllLock
00D7 E0                MOVX    A,@DPTR
00D8 FE                MOV     R6,A
00D9 EE                MOV     A,R6
00DA 25E0              ADD     A,ACC
00DC FE                MOV     R6,A
00DD EE                MOV     A,R6
00DE 4F                ORL     A,R7
00DF FF                MOV     R7,A
00E0 EF                MOV     A,R7
00E1 5403              ANL     A,#03H
00E3 FF                MOV     R7,A
00E4 900000      R     MOV     DPTR,#pllLock
00E7 EF                MOV     A,R7
00E8 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 160
00E9 7FE0              MOV     R7,#0E0H
00EB 7E01              MOV     R6,#01H
00ED 7D00              MOV     R5,#00H
00EF 7C00              MOV     R4,#00H
00F1 120000      E     LCALL   _CyDelayCycles
                                           ; SOURCE LINE # 161
00F4 900000      R     MOV     DPTR,#timeout
00F7 120000      E     LCALL   ?C?LLDXDATA
00FA 7BFF              MOV     R3,#0FFH
00FC 7AFF              MOV     R2,#0FFH
00FE 79FF              MOV     R1,#0FFH
0100 78FF              MOV     R0,#0FFH
0102 120000      E     LCALL   ?C?LADD
0105 900000      R     MOV     DPTR,#timeout
0108 120000      E     LCALL   ?C?LSTXDATA
010B 80A3              SJMP    ?C0008
C51 COMPILER V9.51   CYFITTER_CFG                                                          09/19/2018 02:40:04 PAGE 10  

010D         ?C0009:
                                           ; SOURCE LINE # 163
010D 900000      R     MOV     DPTR,#timeout
0110 120000      E     LCALL   ?C?LLDXDATA
0113 EF                MOV     A,R7
0114 4E                ORL     A,R6
0115 7005              JNZ     ?C0011
                                           ; SOURCE LINE # 164
                                           ; SOURCE LINE # 165
0117 7F03              MOV     R7,#03H
0119 120000      R     LCALL   _CyClockStartupError
                                           ; SOURCE LINE # 166
011C         ?C0011:
                                           ; SOURCE LINE # 169
011C 7B00              MOV     R3,#00H
011E 7A40              MOV     R2,#040H
0120 7904              MOV     R1,#04H
0122 7D00              MOV     R5,#00H
0124 7C01              MOV     R4,#01H
0126 120000      E     LCALL   _cywrite16
                                           ; SOURCE LINE # 170
0129 904000            MOV     DPTR,#04000H
012C 7441              MOV     A,#041H
012E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 173
012F 904200            MOV     DPTR,#04200H
0132 7420              MOV     A,#020H
0134 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 174
0135 904004            MOV     DPTR,#04004H
0138 7407              MOV     A,#07H
013A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 175
013B 904006            MOV     DPTR,#04006H
013E E4                CLR     A
013F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 176
0140 904008            MOV     DPTR,#04008H
0143 7448              MOV     A,#048H
0145 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 177
0146 904004            MOV     DPTR,#04004H
0149 E4                CLR     A
014A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 178
014B 904001            MOV     DPTR,#04001H
014E 7402              MOV     A,#02H
0150 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 179
0151 22                RET     
             ; FUNCTION ClockSetup (END)

             ; FUNCTION AnalogSetDefault (BEGIN)
                                           ; SOURCE LINE # 201
                                           ; SOURCE LINE # 202
                                           ; SOURCE LINE # 203
0000 7B0C              MOV     R3,#0CH
0002 7A01              MOV     R2,#01H
0004 79CF              MOV     R1,#0CFH
0006 120000      E     LCALL   _cyread8
0009 900000      R     MOV     DPTR,#bg_xover_inl_trim
000C EF                MOV     A,R7
C51 COMPILER V9.51   CYFITTER_CFG                                                          09/19/2018 02:40:04 PAGE 11  

000D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 204
000E 900000      R     MOV     DPTR,#bg_xover_inl_trim
0011 E0                MOVX    A,@DPTR
0012 FF                MOV     R7,A
0013 EF                MOV     A,R7
0014 5407              ANL     A,#07H
0016 FF                MOV     R7,A
0017 90586E            MOV     DPTR,#0586EH
001A EF                MOV     A,R7
001B F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 205
001C 900000      R     MOV     DPTR,#bg_xover_inl_trim
001F E0                MOVX    A,@DPTR
0020 FF                MOV     R7,A
0021 EF                MOV     A,R7
0022 C4                SWAP    A
0023 540F              ANL     A,#0FH
0025 FF                MOV     R7,A
0026 EF                MOV     A,R7
0027 540F              ANL     A,#0FH
0029 FF                MOV     R7,A
002A 90586F            MOV     DPTR,#0586FH
002D EF                MOV     A,R7
002E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 206
002F 905876            MOV     DPTR,#05876H
0032 7444              MOV     A,#044H
0034 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 207
0035 22                RET     
             ; FUNCTION AnalogSetDefault (END)

             ; FUNCTION _SetAnalogRoutingPumps (BEGIN)
                                           ; SOURCE LINE # 227
0000 900000      R     MOV     DPTR,#enabled
0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 228
                                           ; SOURCE LINE # 229
0005 905876            MOV     DPTR,#05876H
0008 E0                MOVX    A,@DPTR
0009 FF                MOV     R7,A
000A 900000      R     MOV     DPTR,#regValue
000D EF                MOV     A,R7
000E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 230
000F 900000      R     MOV     DPTR,#enabled
0012 E0                MOVX    A,@DPTR
0013 FF                MOV     R7,A
0014 EF                MOV     A,R7
0015 6010              JZ      ?C0014
                                           ; SOURCE LINE # 231
                                           ; SOURCE LINE # 232
0017 900000      R     MOV     DPTR,#regValue
001A E0                MOVX    A,@DPTR
001B FF                MOV     R7,A
001C EF                MOV     A,R7
001D 4400              ORL     A,#00H
001F FF                MOV     R7,A
0020 900000      R     MOV     DPTR,#regValue
0023 EF                MOV     A,R7
C51 COMPILER V9.51   CYFITTER_CFG                                                          09/19/2018 02:40:04 PAGE 12  

0024 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 233
0025 800E              SJMP    ?C0015
0027         ?C0014:
                                           ; SOURCE LINE # 235
                                           ; SOURCE LINE # 236
0027 900000      R     MOV     DPTR,#regValue
002A E0                MOVX    A,@DPTR
002B FF                MOV     R7,A
002C EF                MOV     A,R7
002D 54FF              ANL     A,#0FFH
002F FF                MOV     R7,A
0030 900000      R     MOV     DPTR,#regValue
0033 EF                MOV     A,R7
0034 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 237
0035         ?C0015:
                                           ; SOURCE LINE # 238
0035 900000      R     MOV     DPTR,#regValue
0038 E0                MOVX    A,@DPTR
0039 FF                MOV     R7,A
003A 905876            MOV     DPTR,#05876H
003D EF                MOV     A,R7
003E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 239
003F 22                RET     
             ; FUNCTION _SetAnalogRoutingPumps (END)

             ; FUNCTION cyfitter_cfg (BEGIN)
                                           ; SOURCE LINE # 261
                                           ; SOURCE LINE # 262
                                           ; SOURCE LINE # 264
0000 7B00              MOV     R3,#00H
0002 7A46              MOV     R2,#046H
0004 79E8              MOV     R1,#0E8H
0006 120000      E     LCALL   _cyread8
0009 EF                MOV     A,R7
000A 4405              ORL     A,#05H
000C FD                MOV     R5,A
000D 7B00              MOV     R3,#00H
000F 7A46              MOV     R2,#046H
0011 79E8              MOV     R1,#0E8H
0013 120000      E     LCALL   _cywrite8
                                           ; SOURCE LINE # 266
                                           ; SOURCE LINE # 288
0016 750000      R     MOV     i,#00H
0019         ?C0017:
0019 E500        R     MOV     A,i
001B C3                CLR     C
001C 9408              SUBB    A,#08H
001E 503A              JNC     ?C0018
                                           ; SOURCE LINE # 289
                                           ; SOURCE LINE # 290
0020 AF00        R     MOV     R7,i
0022 EF                MOV     A,R7
0023 75F005            MOV     B,#05H
0026 A4                MUL     AB
0027 2400        R     ADD     A,#LOW cfg_memset_list
0029 F582              MOV     DPL,A
002B E4                CLR     A
002C 3400        R     ADDC    A,#HIGH cfg_memset_list
002E F583              MOV     DPH,A
C51 COMPILER V9.51   CYFITTER_CFG                                                          09/19/2018 02:40:04 PAGE 13  

0030 AF82              MOV     R7,DPL
0032 AE83              MOV     R6,DPH
0034 8E00        R     MOV     ms,R6
0036 8F00        R     MOV     ms+01H,R7
                                           ; SOURCE LINE # 291
0038 AE00        R     MOV     R6,ms
003A AF00        R     MOV     R7,ms+01H
003C 8F82              MOV     DPL,R7
003E 8E83              MOV     DPH,R6
0040 120000      E     LCALL   ?C?PLDCODE
0043 AE00        R     MOV     R6,ms
0045 AF00        R     MOV     R7,ms+01H
0047 8F82              MOV     DPL,R7
0049 8E83              MOV     DPH,R6
004B 7403              MOV     A,#03H
004D 93                MOVC    A,@A+DPTR
004E FC                MOV     R4,A
004F 7404              MOV     A,#04H
0051 93                MOVC    A,@A+DPTR
0052 FD                MOV     R5,A
0053 120000      E     LCALL   _cymemzero
                                           ; SOURCE LINE # 292
0056 0500        R     INC     i
0058 80BF              SJMP    ?C0017
005A         ?C0018:
                                           ; SOURCE LINE # 295
005A 7B01              MOV     R3,#01H
005C 7A50              MOV     R2,#050H
005E 7903              MOV     R1,#03H
0060 120000      E     LCALL   _cyread8
0063 EF                MOV     A,R7
0064 4402              ORL     A,#02H
0066 FD                MOV     R5,A
0067 7B01              MOV     R3,#01H
0069 7A50              MOV     R2,#050H
006B 7903              MOV     R1,#03H
006D 120000      E     LCALL   _cywrite8
                                           ; SOURCE LINE # 296
0070 7B01              MOV     R3,#01H
0072 7A50              MOV     R2,#050H
0074 7913              MOV     R1,#013H
0076 120000      E     LCALL   _cyread8
0079 EF                MOV     A,R7
007A 4402              ORL     A,#02H
007C FD                MOV     R5,A
007D 7B01              MOV     R3,#01H
007F 7A50              MOV     R2,#050H
0081 7913              MOV     R1,#013H
0083 120000      E     LCALL   _cywrite8
                                           ; SOURCE LINE # 297
                                           ; SOURCE LINE # 301
0086 7B08              MOV     R3,#08H
0088 7A00              MOV     R2,#00H
008A 7900              MOV     R1,#00H
008C C003              PUSH    AR3
008E C002              PUSH    AR2
0090 C001              PUSH    AR1
0092 7B00              MOV     R3,#00H
0094 7A51              MOV     R2,#051H
0096 7902              MOV     R1,#02H
0098 900000      E     MOV     DPTR,#?_cyconfigcpy?BYTE+05H
009B 120000      E     LCALL   ?C?PSTXDATA
C51 COMPILER V9.51   CYFITTER_CFG                                                          09/19/2018 02:40:04 PAGE 14  

009E D001              POP     AR1
00A0 D002              POP     AR2
00A2 D003              POP     AR3
00A4 7F08              MOV     R7,#08H
00A6 7E00              MOV     R6,#00H
00A8 120000      E     LCALL   _cyconfigcpy
                                           ; SOURCE LINE # 302
00AB 7B08              MOV     R3,#08H
00AD 7A00              MOV     R2,#00H
00AF 7908              MOV     R1,#08H
00B1 C003              PUSH    AR3
00B3 C002              PUSH    AR2
00B5 C001              PUSH    AR1
00B7 7B00              MOV     R3,#00H
00B9 7A51              MOV     R2,#051H
00BB 7912              MOV     R1,#012H
00BD 900000      E     MOV     DPTR,#?_cyconfigcpy?BYTE+05H
00C0 120000      E     LCALL   ?C?PSTXDATA
00C3 D001              POP     AR1
00C5 D002              POP     AR2
00C7 D003              POP     AR3
00C9 7F08              MOV     R7,#08H
00CB 7E00              MOV     R6,#00H
00CD 120000      E     LCALL   _cyconfigcpy
                                           ; SOURCE LINE # 304
00D0 904322            MOV     DPTR,#04322H
00D3 E0                MOVX    A,@DPTR
00D4 FF                MOV     R7,A
00D5 EF                MOV     A,R7
00D6 4408              ORL     A,#08H
00D8 FF                MOV     R7,A
00D9 904322            MOV     DPTR,#04322H
00DC EF                MOV     A,R7
00DD F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 305
00DE 9046EC            MOV     DPTR,#046ECH
00E1 E0                MOVX    A,@DPTR
00E2 FF                MOV     R7,A
00E3 EF                MOV     A,R7
00E4 C3                CLR     C
00E5 9405              SUBB    A,#05H
00E7 5006              JNC     ?C0020
                                           ; SOURCE LINE # 306
                                           ; SOURCE LINE # 307
00E9 904689            MOV     DPTR,#04689H
00EC 743A              MOV     A,#03AH
00EE F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 308
00EF         ?C0020:
                                           ; SOURCE LINE # 312
00EF 904800            MOV     DPTR,#04800H
00F2 74F1              MOV     A,#0F1H
00F4 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 314
00F5 120000      R     LCALL   ClockSetup
                                           ; SOURCE LINE # 315
00F8 7B01              MOV     R3,#01H
00FA 7A50              MOV     R2,#050H
00FC 7907              MOV     R1,#07H
00FE 7D40              MOV     R5,#040H
0100 120000      E     LCALL   _cywrite8
                                           ; SOURCE LINE # 316
C51 COMPILER V9.51   CYFITTER_CFG                                                          09/19/2018 02:40:04 PAGE 15  

0103 7B01              MOV     R3,#01H
0105 7A50              MOV     R2,#050H
0107 7917              MOV     R1,#017H
0109 7D40              MOV     R5,#040H
010B 120000      E     LCALL   _cywrite8
                                           ; SOURCE LINE # 319
010E 120000      R     LCALL   AnalogSetDefault
                                           ; SOURCE LINE # 322
0111 7B00              MOV     R3,#00H
0113 7A43              MOV     R2,#043H
0115 79A0              MOV     R1,#0A0H
0117 C003              PUSH    AR3
0119 C002              PUSH    AR2
011B C001              PUSH    AR1
011D 7B00              MOV     R3,#00H
011F 7A43              MOV     R2,#043H
0121 79B0              MOV     R1,#0B0H
0123 900000      E     MOV     DPTR,#?_cyconfigcpy?BYTE+05H
0126 120000      E     LCALL   ?C?PSTXDATA
0129 D001              POP     AR1
012B D002              POP     AR2
012D D003              POP     AR3
012F 7F0E              MOV     R7,#0EH
0131 7E00              MOV     R6,#00H
0133 120000      E     LCALL   _cyconfigcpy
                                           ; SOURCE LINE # 323
0136 9043B0            MOV     DPTR,#043B0H
0139 E0                MOVX    A,@DPTR
013A FF                MOV     R7,A
013B EF                MOV     A,R7
013C 54FD              ANL     A,#0FDH
013E FF                MOV     R7,A
013F EF                MOV     A,R7
0140 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 324
0141 22                RET     
             ; FUNCTION cyfitter_cfg (END)



MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    796    ----
   CONSTANT SIZE    =     40    ----
   XDATA SIZE       =   ----       9
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----       3
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
